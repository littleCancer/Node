


/*

█████████████████████ cela.js

██ https://github.com/jasonhargrove/cela

*/




// ██████████ Users Module


module.exports = function ( moda, cela ) {


  // Dependencies

  // // TODO // This is intended to be optional

  // // SEE > https://github.com/objas/cela/issues . REF > #7 #8 #9

  var bcrypt = require( 'bcrypt' );


  // DEPENDENCY // USER ROLES

  // // TODO // Bring this back into the Users moda

  // DEPENDENCY // USER PASSPORT

  // // For now manually loading this

  cela.require( '../moda/users/moda.passport' )( moda, cela );


  // A wrapper for the Users Role module
  
  // moda.role_is = function ( role_required ) {

  //   cela.moda.role.is( 'authenticated' );

  // };

  var app_name = cela.options.name.replace( /_/g, ' ' );


  // ██████████================ BASE CRUD
  // ██████████===========================


  moda.read = function ( query, callback ) {

    // NOTE // TEST WRITTEN

    cela.moda.signals.read({

      db_type: 'mongo',

      model_type: 'users',

      query: query

    }, callback );

  };


  moda.save = function ( user_document, callback ) {

    // NOTE // TEST WRITTEN

    cela.moda.signals.save({

      db_type: 'mongo',

      model_type: 'users',

      document: user_document

    }, callback )

  };




  moda.route_user_new = function ( req, res, view_options ) {


    // Init

    // // TODO // Identity Field should be optional (ie: support for user; see User Passport)

    var email = req.body.email,

        name = req.body.name;

    // Ensure email doesn't already exist

    moda.find_by_email(

      email,

      function find_callback ( err, users ) {

        // Test if email already in db

        if ( users[0] != undefined ) {

          req.flash( 'error', 'User already exists.');

          return res.redirect( view_options.fail_redirect );

        }

        // Save new user

        moda.user_new_save({

          email: email,
          name: name

        },

        // Reply to route request

        function user_new_callback ( err, users ) {

          var heading = 'User Created!',
              message = '';

          // NOTE // Set in your_platform/package.json // see platforms/cela_serva for example

          if ( cela.options.user_new_url_gui_message ) {

            var password_token_url = 'Set Password URL: ';

            password_token_url += generate_password_token_url( users[0] );

            message += message + ' ' + password_token_url;

          }

          res.render( './views/views_users_admin_users_list', {

            site_name: app_name,
            title: app_name + ' - ' + heading,
            heading: heading,
            user: req.user,
            users: users,
            message: message

          })

        });

    });

  };



  moda.user_new_save = function ( user_object, user_new_callback ) {

    // Create a new password token

    generate_password_token(

      user_object.email,

      function generate_password_token_callback ( err, password_token ) {

        if ( err ) {

          moda.error( 'user_new_save_pass_token_error' );

          return user_new_callback( err )

        }

        // Store user's token

        user_object.password_token = password_token;

        // Save user

        moda.save(

          user_object,

          function save_callback ( err, result ) {

            user_new_callback( err, result );

            moda.user_new_actions( user_object );

        });

    });

  };



  // ██████████===================== AUTH
  // ██████████===========================



  moda.password_set = function ( req, res, render_options ) {

    var email = req.params.email;

    moda.find_by_email( email, function find_callback ( err, users ) {

      if ( users == undefined || users[0] == undefined ) {
        res.json({ error: 'No user found' })
      }

      var user = users[0];

      var password_token = users.password_token;

      res.render( render_options.view, {
        heading: 'Password Set',
        email: user.email
      });

    });

  };

  moda.password_set_post = function ( req, res, render_options ) {


    // Request parameters

    var email = req.params.email,
        password = req.body.password,
        password_confirm = req.body.password_confirm;

    // Ensure minimum password length; matching Twitter's min length

    if ( password_confirm.length < 6 ) {

      return res.render( render_options.fail_view, {

        email: email,
        error: 'Password must be at least six characters.'

      });
 
    }

    // Ensure that passwords match

    if ( password_confirm != password ) {

      return res.render( render_options.fail_view, {

        email: email,
        error: 'Passwords do not match, please try again.'

      });

    }

    // Find user

    moda.find_by_email( email, function find_callback ( err, users ) {

      var user = users[0];

      moda.new_password_hash( password, function hash_callback ( hashed_password ) {

        user.password = hashed_password;

        moda.save( user, function save_callback ( err, result ) {

          req.flash( 'message', render_options.success_message );

          res.redirect( '/account/login' );

        });

      });

    });

    // end password_set_post

  };


  moda.account_password_reset = function ( req, res, render_options ) {

    var email = req.body.email;

    moda.find_by_email( email, function find_by_email_callback ( err, users ) {

      if ( users == undefined || users[0] == undefined ) {
        return res.json({ error: 'No user found' })
      }

      var user = users[0];

      // Create a new password token

      generate_password_token(

        user.email,

        function generate_password_token_callback ( err, password_token ) {

          if ( err ) {

            moda.error( 'user_new_save_pass_token_error' );

            return user_new_callback( err )

          }

          // Store user's token

          user.password_token = password_token;

          // Save user

          moda.save(

            user,

            function save_callback ( err, result ) {

              // Process actions (send email)

              moda.user_password_reset_actions_send_email( user );

              req.flash( 'message', render_options.success_message );

              res.redirect( '/account/login' );


          });

      });


    });

  };


  moda.new_password_hash = function ( plain_password, callback ) {

    bcrypt.hash( plain_password, 10, function( err, hash ) {

      callback( hash )

    });

  };



  moda.compare_password_hash = function ( plain_password, hash, callback ) {

    bcrypt.compare( plain_password, hash, function ( err, result ) {

      callback( result )

    });

  };


  moda.login_failed = function ( method_name, error_message, callback ) {

    if ( method_name == undefined ) { var method_name = 'moda.users.login_failed'; }

    moda.error( method_name + error_message );

    return callback( new Error( method_name + ' ' + error_message ), [] );

  };


  // Used in password set and reset

  function generate_password_token ( email, callback ) {


    // Aquire settings

    var settings = cela.require(

      '../private/private.settings.js'

    )( null, cela ).reset_password;


    // Build string

    var reset_string = email;

    reset_string += settings.separator;

    reset_string += new Date().getTime();

    reset_string += settings.separator;

    reset_string += settings.secret;


    // Encrypt

    // // TODO // This needs to be made optional

               // https://github.com/objas/cela/issues/9

    bcrypt.hash(

      // the secret sauce

      reset_string,

      // level of difficulty

      7,

      // reply

      function bcrypt_hash_callback ( err, hash ) {

        callback( err, hash )

    });


    // end function generate_password_token

  };

  // Used in password set and reset

  function generate_password_token_url ( user_object ) {

    // Parameters

    var set_password_path = '/account/password/set/' + user_object.email,

      password_token = '?password_token=' + user_object.password_token;

    return 'http://' + cela.options.domain + set_password_path + password_token;


  };



  // ██████████===================== ACTIONS
  // ██████████=============================


  moda.user_new_actions = function ( user_object ) {

    if (

      cela.options.user_new_send_mail == undefined ||
      cela.options.user_new_send_mail
      
      ) {

        moda.user_new_actions_send_mail( user_object );

    }

    if ( cela.options.user_new_console_report ) {

      moda.info( '#newuser', user_object );

      moda.info(

        '#setpassword',

        generate_password_token_url( user_object )
        
      );

    }

    return true

  };


  moda.user_new_actions_send_mail = function ( user_object ) {


    // Search fresh, because of Async goodness / badness

    moda.find_by_email( user_object.email, function find_callback ( err, users ) {


      // TODO // Validation

      var user = users[0];


      // Email Settings

      var from = app_name + '<no-reply@' + cela.options.domain + '>',

          email = user_object.email,

          subject = '',

          text = '';


      // Content formatters

      var new_line = '\n',

          new_paragraph =  new_line + new_line;


      // TODO // Store content in Mongo for Admin GUI editing

      subject = 'Welcome! Please select a password.';

      text = 'Welcome to ' + app_name + '!' + new_paragraph;

      text += 'To activate your account and login, please set your password:' + new_paragraph;

      text += generate_password_token_url( user );


      // Send Mail

      cela.moda.actions.send_mail({

        from: from,
        to: user_object.email,
        subject: subject,
        text: text

      }, function send_mail_callback ( err, message ) {

        moda.info( '#EmailSent', message )

      });

      // end find_callback

    });


  };


  moda.user_password_reset_actions_send_email = function ( user, callback ) {


    // Email Settings

    var from = app_name + '<no-reply@' + cela.options.domain + '>',

        email = user.email,

        subject = '',

        text = '';


    // Content formatters

    var new_line = '\n',

        new_paragraph =  new_line + new_line;


    // TODO // Store content in Mongo for Admin GUI editing

    subject = 'Request received! Please select a password.';

    text += 'To reset your password and login:' + new_paragraph;

    text += generate_password_token_url( user );


    // Send Mail

    cela.moda.actions.send_mail({

      from: from,
      to: user.email,
      subject: subject,
      text: text

    }, function send_mail_callback ( err, message ) {

      moda.info( '#EmailSent', message );

    });


    // end user_password_reset_actions

  };


  // ██████████===================== FIND USERS
  // ██████████================================



  moda.find = function ( user_id_type, user_id, callback ) {

    var query = {};

    query[ user_id_type ] = user_id;

    moda.read( query, function ( err, users ) {

      if ( users == undefined || users[0] == undefined || err != undefined ) {

        if ( err != undefined ) {

          callback( err, users );

        } else {

          callback( err, users );

        }

        return

      } else {

        return callback( null, users )

      }

    });

  };


  moda.find_by_email = function ( email, callback ) {

    this.find( 'email', email, callback )

  };


  moda.find_by_username = function ( username, callback ) {

    this.find( 'username', username, callback )

  };


  moda.find_by_id = function ( id, callback ) {

    this.find( '_id', id, callback )

  };



  return moda

};












