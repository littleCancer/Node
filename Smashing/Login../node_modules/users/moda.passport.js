


/*

█████████████████████ cela.js

██ https://github.com/jasonhargrove/cela

*/






// ██████████ Passport Module

module.exports = function ( moda_users, cela ) {


  var passport = cela.require( 'passport' ),

      flash = cela.require( 'connect-flash' ),

      util = require( 'util' );



  // Make a sub-moda

  // // TODO // This should be automated

  // // TODO // Move to moda.users.moda.passport

  var moda_options = {

        name: 'users_passport',
        identity_field: 'email',
        identity_fieldname: 'Email'

      };

  var moda = cela.require( './moda.make.js' )( moda_options, moda_users );



  moda.get_strategy = function () {


    // A wrapper method for the local-strategy package

    function Strategy( options, verify ) {

      if ( typeof options == 'function' ) {

        verify = options;

        options = {};

      }

      if ( !verify ) throw new Error( 'local authentication strategy requires a verify function' );
      
      this._usernameField = options.usernameField || 'username';

      this._passwordField = options.passwordField || 'password';


      passport.Strategy.call(this);

      this.name = 'local';

      this._verify = verify;

      this._passReqToCallback = options.passReqToCallback;

    };

    /**
     * Inherit from `passport.Strategy`.
     */

    util.inherits( Strategy, passport.Strategy );


    function BadRequestError ( message ) {

      Error.call( this );

      Error.captureStackTrace(this, arguments.callee);

      this.name = 'BadRequestError';

      this.message = message || null;

    };

    BadRequestError.prototype.__proto__ = Error.prototype;





    /**
     * Authenticate request based on the contents of a form submission.
     *
     * @param {Object} req
     * @api protected
     */

    Strategy.prototype.authenticate = function( req, options ) {


      options = options || {};


      var username = lookup( req.body, this._usernameField ) || lookup( req.query, this._usernameField );

      var password = lookup( req.body, this._passwordField ) || lookup( req.query, this._passwordField );



      if ( !username || !password ) {

        return this.fail( new BadRequestError( options.badRequestMessage || 'Missing credentials' ) );

      }
      

      var self = this;


      function verified ( err, user, info ) {

        if ( err ) { return self.error(err); }

        if ( !user ) { return self.fail(info); }

        self.success( user, info );

      }


      if ( self._passReqToCallback ) {

        this._verify( req, username, password, verified );

      } else {

        this._verify( username, password, verified );

      }

      
      function lookup ( obj, field ) {

        if ( !obj ) { return null; }

        var chain = field.split( ']' ).join( '' ).split( '[' );

        for ( var i = 0, len = chain.length; i < len; i++ ) {

          var prop = obj[ chain[i] ];

          if ( typeof ( prop ) === 'undefined' ) { return null; }

          if ( typeof ( prop ) !== 'object' ) { return prop; }

          obj = prop;

        }

        return null;

      };


      return

    };



    // end get_strategy

    return Strategy

  };


  local_strategy = moda.get_strategy();


    // Configure Passport

    // // To use the local strategy

    passport.use(
      
      new local_strategy(

       { usernameField: moda.options.identity_field },

        function local_strategy_callback ( username, password, done ) {

          var find_type = 'find_by_username';

          if ( moda.options.identity_field == 'email' ) {

            find_type = 'find_by_email';

          }

          process.nextTick( function () {

            moda_users[find_type](

              username,

              function find_callback ( err, users ) {

                if ( err ) { return done( err ); }

                var user = users[0];

                if ( !user ) {

                  return done( null, false, { message: 'Email address not found.' });

                }


                moda_users.compare_password_hash(

                  password,

                  user.password,

                  function compare_password_hash_callback ( result ) {

                    if ( result == false ) {

                      return done( null, false, { message: 'Password is incorrect.' } )

                    }

                    // User and Password check out; return user

                    return done( null, user );

                });

              });

          });

        }
      )
    );


    // // To serialize user id

    passport.serializeUser( function ( user, done ) {

      done( null, user._id )

    });

    // // To serialize user id

    passport.deserializeUser( function ( id, done ) {

      moda_users.find_by_id( id, function ( err, users ) {

        done( err, users[0] )

      });

    });



    // CONFIGURE

    cela.app.use( cela.app.express.session({ secret: 'cOk3)ZeR0' }) );

    cela.app.use( flash() );

    cela.app.use( passport.initialize() );

    cela.app.use( passport.session() );



    // PASSPORT

    moda.passport = passport;


    // ANNOUNCE

    moda.announce( 'Express configured to use Passport' )


  return moda

};







